Metadata-Version: 2.4
Name: awesome-cli
Version: 0.1.0
Summary: An extensible CLI framework for building modular command-line applications
Home-page: https://github.com/yourusername/awesome-cli
Author: Your Name
Author-email: Your Name <your.email@example.com>
License: MIT
Project-URL: Homepage, https://github.com/yourusername/awesome-cli
Project-URL: Repository, https://github.com/yourusername/awesome-cli
Project-URL: Bug Tracker, https://github.com/yourusername/awesome-cli/issues
Keywords: cli,command-line,framework,extensible,modular
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Application Frameworks
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: black>=22.0; extra == "dev"
Requires-Dist: flake8>=4.0; extra == "dev"
Requires-Dist: mypy>=0.950; extra == "dev"
Requires-Dist: build>=0.7; extra == "dev"
Requires-Dist: twine>=4.0; extra == "dev"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# awesome-cli - Extensible CLI Framework

A Python library for building modular, extensible command-line applications with automatic command discovery.

## Features

- 🔌 **Plugin-based architecture** - Commands are self-contained modules
- 🔍 **Automatic command discovery** - Drop in a file and it works
- 📦 **Zero dependencies** - Pure Python implementation
- 🎯 **Type-safe** - Full type hints support
- ⚡ **Easy to extend** - Simple Command base class
- 🛠️ **Built on argparse** - Familiar and powerful argument parsing

## Installation

### From PyPI (when published)
```bash
pip install awesome-cli
```

### From source
```bash
git clone https://github.com/yourusername/awesome-cli
cd awesome-cli
pip install -e .
```

### For development
```bash
pip install -e ".[dev]"
```

## Quick Start

### Using awesome-cli as a Library

1. **Install the library**:
```bash
pip install awesome-cli
```

2. **Create your CLI application**:
```python
#!/usr/bin/env python3
# my_app.py
import sys
from awesome_cli import CLI

def main():
    cli = CLI(
        name="my-app",
        description="My CLI Application",
        version="1.0.0"
    )

    # Discover commands from a directory
    cli.discover_commands("commands")

    sys.exit(cli.run())

if __name__ == "__main__":
    main()
```

3. **Create a command**:
```python
# commands/hello.py
from awesome_cli import Command
import argparse

class HelloCommand(Command):
    """Say hello to someone."""

    def add_arguments(self, parser: argparse.ArgumentParser) -> None:
        parser.add_argument('name', help='Name to greet')
        parser.add_argument('--shout', action='store_true', help='Shout the greeting')

    def execute(self, args: argparse.Namespace) -> int:
        greeting = f"Hello, {args.name}!"
        if args.shout:
            greeting = greeting.upper()
        print(greeting)
        return 0
```

4. **Run your CLI**:
```bash
python my_app.py hello World
# Output: Hello, World!

python my_app.py hello World --shout
# Output: HELLO, WORLD!
```

## Command Structure

Every command must:

1. Inherit from the `Command` base class
2. Implement `add_arguments()` to define arguments
3. Implement `execute()` to define the logic
4. Optionally override `validate()` for argument validation

```python
from awesome_cli import Command
import argparse

class MyCommand(Command):
    """Command description shown in help."""

    def add_arguments(self, parser: argparse.ArgumentParser) -> None:
        """Define command arguments."""
        parser.add_argument('--option', required=True, help='An option')

    def execute(self, args: argparse.Namespace) -> int:
        """Execute command logic."""
        print(f"Option value: {args.option}")
        return 0  # Return 0 for success, non-zero for failure

    def validate(self, args: argparse.Namespace) -> bool:
        """Optional: Validate arguments before execution."""
        if len(args.option) < 3:
            print("Option must be at least 3 characters")
            return False
        return True
```

## Advanced Usage

### Manual Command Registration

```python
from awesome_cli import CLI
from my_commands import CustomCommand

cli = CLI(name="my-app")

# Register individual command instance
command = CustomCommand()
cli.register_command(command)

# Or register command class
cli.register_command_class(CustomCommand)
```

### Discover Commands from Installed Package

```python
cli = CLI(name="my-app")

# Discover from an installed module
cli.discover_commands_from_module("my_package.commands")
```

### Custom Command Names

By default, command names are derived from class names (e.g., `HelloCommand` → `hello`). Override this in your command:

```python
class MyCommand(Command):
    def __init__(self):
        super().__init__()
        self.name = "custom-name"  # Override default name
```

## Project Structure

```
my-project/
├── my_cli.py              # Main CLI entry point
├── commands/              # Commands directory
│   ├── __init__.py
│   ├── create.py         # create command
│   ├── list.py           # list command
│   └── delete.py         # delete command
├── requirements.txt
└── README.md
```

## Building and Publishing

### Build the package
```bash
python -m build
```

### Upload to PyPI
```bash
python -m twine upload dist/*
```

## Examples

See the `example_project/` directory for a complete example application.

## Development

### Running tests
```bash
pytest
```

### Code formatting
```bash
black awesome_cli/
```

### Type checking
```bash
mypy awesome_cli/
```

### Linting
```bash
flake8 awesome_cli/
```

## License

MIT License - see LICENSE file for details.

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.
